. arreglar el margen del footer
. CRM
    - En Landing Page
        - Front
            - Agregar galería de imágenes (ok)
            - El botón de eliminar pasarlo al Modal (ok)
            - Codificar el botón "Agregar" para agregar nuevas fotos
            - Agregar botón Guardar
            - Agregar sección de "Preview - Quienes somos" después de la 
                galeria para mostrar
                como se vería el contenido y el carrousel en landinPage
            - Agregar botón de "Preview Landing Page"
                -Abrir en una nueva pestaña la página de Preview
        - Backend
            - Crear la estructura en cloudinary para empresa (ok)
            - Crear ruta y controlador para: postGeleria
                - Parámetros: id_empresa, fuente, imagen, orden
            - Crrear ruta y controlador para: putGeleria
                - Parametros: id_empresa, fuente, imagen, orden
        - SQL
            - getGaleria (ok)
            - Crear tabla: landingPage_galeria
                - Campos:
                    - identidad, id_empresa, fuente, imagen, orden
            - Crear sp: postGaleria
            - Crear sp: putGeleria


Terminado:
- Cambiar buscar cliente de agenda a modelo y probar
- Replicar buscar cliente por celular de Agenta a Cotizar
- Crear getTipoPedido en SQL
- Crear controlador getTipoPedido
- Crear modelo TipoPedido            
- Crear modelo funcion getTipoPedido
- Llamar funcion getTipoPedido en Cotizar
- Agregar botones agrupados para seleccionar el TipoPedido
- Agregar TipoPedido en el modelo de Pedido
- Asignar en CrearPedido el TipoPedido
- Crear postCrearpedido, regresar el IdPedido en SQL
- Nueva entidad pedido_formas_de_pago
- Crear al model pedido pedido_formasDePago
- Agregar en sql el proc que obtiene la landingPage para agregar las formas de pago y los tipos de pedido para cargarlos al inicio
- Adecuar la función getTipoPedido del modelo para que obtenga el data de la landingPage
- Crear modelo formas_de_pago
- Crear funcion getFormasDePago para que los tome de la data de la landingPage
- Crear dos funciones una para obtener las formas de pago del carrito y otra para obtener las formas de pago en sitio
- Cambiar las formas de pago estáticas por dinámicas con la nueva identidad
- Agregar a crear_pedido en ColocarPedidoRestaurante las formas de pago
- Modificar postPedido para recibir pedido_formasDePago
- Revisar controlador postPedido
- En la tabla formas_de_pago agregar los campos boleanos: es_pago_en_linea y es_pago_en_sitio
- Agregar en StateUtils obtener idUsuario del state
- Hacer pruebas Revisar que se haya generado el pedido. 
- Revisar porque no se agregaron las formas de pago del pedido
- Revisar porque no mostró el número del pedido
- En el catálago de formas de pago agregar los campos: en_sitio y en_tienda_online
- Crear tabla colonias_delivery
- Crear sp getColoniasDelivery
- Crear controlador getColoniasDelivery
- Crear ruta getColoniasDelivery
- Crear modelo getColoniasDelivery
- Agregar la opción de otros en el setColonias como: 0 - Otros
- Al seleccionar la opción de Otros capturar la nueva colonia
- Agregar el modelo postPedido los datos del domicilio
- Agregar en la alta del pedido los datos del domicilio
- Agregar el domicilio a postPedido en SQL
- Agregar la nueva colonia en el postPedido en el catalago de colonias_delivery
- Enviar el nombre de la nueva colonia en los datos del post
- Asignar el domicilio del cliente cuando se seleccione entrega a domicilio
- Guardar la colonia seleccionada en un nuevo setState
- En handleCrearPedido en colonia agregar el nombre de la colonia seleccionada si id_colonia no es null
- Asignar la constante pedido_domicilio en un nuevo useState domicilioTicket
- Pasar domicilioTicket a Cotizar
- Pasar domicilioTicket a ticket
- Mostar los datos del domicilio en ticket si estos traen datos.
- Mostar los datos de la dirección de envio para la impresión del ticket
- Al crear un nuevo pedido que el tabulador inicie en Cliente
- Al teclear el celular del cliente obtener el domicilio (Opcional)
- Validad que no se pueda crear el pedido si el tipo de pedido es Domicilio y la colonia es null, numero es null o si la colonia es 0 and nombre is null
- Al presionar regresar para agregar un producto y al volver a colocar el pedido no limpiar los datos capturados como: celular, nombre y tipo de pedido
- Agregar botón cancelar en ColocarPedidoRestaurante el cual se activa al momento de getClientePorTelefonoOCelular
    pagos capturados
- Al presionar cancelar se debe guardar el pedido pero con el estatus cancelado
- Vaidar botón regresar para que no se pueda regresar cuando tenga pagos capturados
-- Revisar porque no se están cancelando los pedido
-- Revisar porque después de crear un pedido se quedan pegados los pagos aplicados
- Arreglar los botones de formas de pagos para que sea responive a 6, 4 y 2 columnas
- Desabilitar Tipo de Pedido: Domicilio si el cliente celular = 0
- Pasar el cambio para el final de los pagos realizados
- Ver la parte del cargo por envío
- Agregar el cargo por envio en la tabla colonias_delivery
- Modificar el sp buscar cliente para que se obtenga el cargo por delivery
- Adecuar el Header de color pedido como: Subtotal, Envio, Cargo, Total y Subtotal
- Agregar campo de costo por envio al seleccionar la columna



Pendiente:

OK- Crear tabla cajero: id_empresa, id_cajero, nombre, contraseña
    OK- Crear getCajeros
    OK- Crear controlador y ruta getCajero
    OK- Crear modelo getCajero
    OK- Agregar la captura del número de cajero en ColocarPedidoRestaurante en el tab de cliente en forma de selector para que seleccione el cajero
    OK- Validar que no se active el botón de "Crear pedido" si no se a seleccionado un cajero
    OK- Agregar cajero al modelo de Pedido
    OK- Agregar al pedidoPreview el cajero
    OK- Agregar el cajero al crear el pedido
    OK- Agregar campo cajero en la tabla Pedido
    OK- Actualizar controlador postPedido para enviar el parámetro cajero
    OK- Actualizar postPedido para recibir cajero y guardarlo en pedido
    OK- Hacer una prueba de un nuevo pedido
    OK- Agregar en el ticket el nombre del cajero

OK- Tipos Movimientos caja_tipo_movimientos: id_empresa, id_tipo_movimiento_caja, descripcion, abre_caja, cierra_caja, sumaoresta
    Descripción de tipos de movimiento: Abrir, Cerrar, Ingresar Efectivo, Retirar Efectivo
OK- Caja: id_empresa, id_caja, ip, fecha, fecha_cierre, esta_abierta,
        importe_inicial, importe_otros_ingresos, importe_retiros, importe_soloEfectivo, importe_formasDePago 
        importe_diferencia, 
        id_cajero_abre_caja, id_cajero_cierra_caja
OK- caja_movimientos: id_empresa, id_caja, id_tipo_movimiento_caja, importe
OK- caja_formasDePago: id_empresa, id_caja, id_forma_de_pago, importes_formaDePago

ok- Agregar botón: Caja
ok- Crear getCaja: Obtener el estado de la caja si esta abierto o cerrado enviando la ip y que nos regrese el id_caja, estado_abierta
ok- Crear controlador y ruta getCaja
ok- Obtener el estado de la caja en useState del componente Cotizar
ok- Validar si el estado_abierta es true habilitar los botones de agregar


ok- Crear componente Caja
    ok- Agregar una forma con los campos de captura: 
        cajero (selector), tipo_importe (Ingreso/Retiro), motivo, 
        importe, contraseña, ¿Cerrar caja? si se seleccionó tipo_importe = retiro
    ok- Si cerrar_caja = true:
        ok- mostrar las formas de pago existentes para capturar los ingresos por forma de pago 
        ok- guardar en un json los importes de las formas de pago {id_forma_de_pago, importe}
    ok- Validar que nos e pueda seleccionar Cerrar Caja si la caja esta cerrada.

ok- Crear postCajaaAbrir si la caja esta cerrada: Parametros: id_empresa, ip, fecha, id_cajero_abre_caja
ok- Llamar el endpoint postCajaaAbrir en el componente Caja cuando la caja este cerrada.
ok- Generar un ticket por cada movimiento que se haga.
ok- Crear putCaja: Valida que no se pueda crear una caja nueva si hay una caja pendiente de la misma ip
    - Los parametros son: id_empresa, id_caja, tipo_importe, importe, motivo, id_cajero, contraseña, ip, cerrar_caja, importes_formaDePago
    - Si cerrar_caja = true entonces crear un registro nuevo en la tabla:
        - los importes_formaDePago se guardan en la tabla de caja
        - cortecaja: Campos: id_empresa, id_corteCaja, id_caja, fecha, cajero
        - Desabilitar los botones de agregar y eliminar
- Hacer pruebas con varias compras e movimientos de caja para revisar las diferencias.

- ok Crear nuevo componente para la consulta de movimientos de caja.
    ok- Crear en mysql getMovimientosCaja
    ok- Crear ruta y controlador
    ok- Agregar en postPedido el id_caja
    ok- Agregar botón para mostrar los pedidos
    OK- Crear proc para obtener los pedidos por id_caja con su detalle en JSON_EXTRACT
    ok- Crear controlador y ruta
    ok- Agregar el id_ticket en boton para mostar el pedido
    ok- Agregar la opción para imprimir el ticket
    OK- Agregar campo nuevo en pedido "importe_envio"
    OK- Guardar el cargo por envio en postPedido

- Inventarios
    ok- Crear tabla de Existencias con los campos:
        ok- id_empresa, id_producto, cantidad
    OK- Crear tabla tipos_movimiento_inventario con los campos:
        OK- id_empresa, id_tipo_movimiento, descripcion, tipo_operacion ENUM('E', 'S')
        OK- Crear los registros: 
            1 = Entrada por Compra, E
            2 = Salida por Venta, S
            3 = Ajuste positivo, E
            4 = Ajuste negativo, E
    - 
    OK- Modificar postProducto.
        OK- Crear registro en existencia igual a cero al crear producto 
        OK- Crear la existencia del producto manualmente.

    - postPedido si el producto vendido 
        OK- existe en la tabla de combos, decrementar la existencia de cada uno de los id_producto_combo si maneja existencia
        OK- si no es combo entonces decrementar solo la existencia de id_producto
        ok- crear movimiento en la tabla de kadex haciendo referencia al id_tipo_movimiento = 2 y referencia_documento = id_pedido

- Kardex
    - Crear tabla kardex con los campos:
        OK-     id_empresa, id_kardex, id_producto, fecha_movimiento, id_tipo_movimiento, cantidad, costo_unitario, 
                referencia_documento, saldo_anterior, saldo_actual, observaciones, id_usuario
        - Crear postKardex (Pendiente)
        - Crear ruta y controlador (Pendiente)
    OK- Crear la consulta de kardex
        OK- Crear getKardex
        OK- Crear ruta y controlador

- Nueva pantallas de Combos
    OK- Crear tabla combos con los campos:
    ok- id_empresa, id_producto, id_producto_combo, cantidad
    ok- crear getProductosCombo, postCombo
    ok- crear controlador y ruta
    ok- Crear la pantalla para la alta de combos de productos, adicionarla a la actual

- Nueva pantalla de Proveedores

- Nueva pantalla de Ordenes de compra
        ok- Crear tabla ordencompra_estado
        ok- Campos: id_empresa, id_estado_ordencompra, descripción
        ok- Crear registros: Pendiente, Recibida, Cancelada, Cuando el estatus sea recibida se afecta el inventario.
        ok- Agregar los regisros en postHost
        ok- crear getOrdeDeCompra
        ok- Crear ruta y controladores


    OK- Crear nueva tabla ordencompra
        OK- Campos: id_empresa, id_ordencompra, fecha, id_proveedor, total_orden, id_estado_ordencompra

    OK- Crear nueva tabla detalle_ordencompra
        OK- Campos: id_empresa, id_ordencompra, partida, id_producto, cantidad, costo_unitario, subtotal

    ok- Crear 
        ok- getOrdenDeCompra, 
        ok- postOrdenDeCompra
        ok- putOrdenDeCompra
        ok- deleteOrdenDeCompra

    ok- crear controladores y rutas
        ok- Al crear la orden se debe de incrementar la existencia de cada uno de los productos.
        ok- También se debe crear un registro en el kardex, la referencia_documento = orden de compra y el id_tipo_movimiento
    - crear pantalla  

- Nueva pantalla de ajustes de Inventario. (no fue necesario quedo dentro de la consulta de kardex) 
    ok - Crear tabla ajustes_inventario
        Campos: id_empresa, id_ajuste, fecha, id_producto, cantidad_ajustada, id_tipo_movimiento, id_usuario, razon_ajuste
    ok- Crear pantalla de ajustes
    ok- Crear postAjusteInventario
        ok- Se debe de incrementar o decrementar la existencia dependiendo si es entrada o salida sgún el id_tipo_movimiento.
        ok- Se debe de generar un movimiento de kardex con razon_ajuste = "Auditoria de Inventario"
    ok- Crear ruta y controlador    


- Si se registró una nueva colonia, volver a cargar el getColoniasDelivery
- Validar que la colonia capturada no exista
- Autenticar ruta getTipoPedido en Admin.routes
- Agregar TipoPedido en postHost (Alta de un nuevo host)
- Validar que la forma de pago acepte cantidades mayores o no
- Ver la parte del cargo por cobro con tarjeta
- Validar que en la alta de productos que el SKU no se repita que sea único, y también en la pantalla.

Conf Menu

- ABC Menu
- ABC Roles