PORT=3000
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE='crm'
DB_USER='appusercrmadmin'
DB_PASSWORD='appusercrmadmin'
CLOUDINARY_CLOUD_NAME='ddhxa9igj'
CLOUDINARY_API_KEY='778763934991892'
CLOUDINARY_API_SECRET='bPPu6qPoKNgRwLZmRYWjLqzXBgo'


nuevas tablas:
    agenda
    agenda_estatus
    jornada_laboral

nuevo sps:
    deleteAgenda
    postAgenda
    getAgendaBuscarCita
    getAgendaDisponibilidad

nuevos cambios en tablas:
    agregue el campo mostrar_productos_verMas 

nuevos cambios en sps:
    cambie el sp getLandingPage: agregué el campo: mostrar_productos_verMas
    cambie el sp putLandingPage: agregue el cambo: mostrar_productos_verMas

Pendientes:
    Agregar en la pagina de landingPage 
        - el botón para mostar ver mas Productos (Listo)
        - links para redes sociales y mostrarlas en la página si estas traen contenido

23/02:
    agregue el componente en frontend: npm install react-calendar


cambios en DB:

CREATE DEFINER=`root`@`localhost` PROCEDURE `postAgenda`(
	IN prm_id_empresa INT,
	IN prm_fecha DATE,
    IN intervalo VARCHAR(20),
    IN prm_id_usuario INT   
)
BEGIN
	DECLARE separador INT;
	DECLARE _hora_inicio TIME;
    DECLARE _hora_fin TIME;
    DECLARE _dia_semana INT;
    DECLARE _id_jornada INT;
    DECLARE _id_agenda_estatus SMALLINT;
    DECLARE _id_agenda INT;
    DECLARE _id_clave_confirmacion VARCHAR(6) DEFAULT '';
    
    SET _dia_semana = WEEKDAY(prm_fecha);
    SET _id_agenda_estatus = 2;
    
	SELECT JL.id_jornada INTO _id_jornada
	FROM jornada_laboral JL
	WHERE JL.dia_semana = _dia_semana;  
    
    -- Buscar la posición del separador "-" para obtener la fecha y hora 
	SET separador = LOCATE('-', intervalo);    
    SET _hora_inicio = TIME(SUBSTRING(intervalo, 1, separador - 1));
	SET _hora_fin = TIME(SUBSTRING(intervalo, separador + 2));
    
    -- SELECT _hora_inicio, _hora_fin;
    
    -- Busco si no hay cita reservada
    IF NOT EXISTS(
		SELECT 1
		FROM agenda A
		WHERE A.id_empresa = prm_id_empresa AND A.fecha = prm_fecha AND A.hora_inicio = _hora_inicio AND A.hora_fin = _hora_fin
    ) THEN
		
        -- GENERO CLAVE DE CONFIRMACION
        SET _id_clave_confirmacion = fn_genera_clave_confirmacion(prm_id_empresa);
    
		INSERT INTO agenda (id_empresa, fecha, hora_inicio, hora_fin, id_usuario, id_agenda_estatus, id_jornada, clave_confirmacion) 
			VALUES (prm_id_empresa, CURDATE(), _hora_inicio, _hora_fin, prm_id_usuario, _id_agenda_estatus, _id_jornada, _id_clave_confirmacion);
		SET _id_agenda = LAST_INSERT_ID();
	END IF;
    
    SELECT _id_clave_confirmacion AS folio_confirmacion;		
		
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `getAgendaPorDia`(
	IN prm_id_empresa INT,
	IN prm_fecha DATE
)
BEGIN
	DECLARE dia_semana INT;    
    DECLARE duracion_cita INT;
    	
    DECLARE _hora_inicio TIME;
	DECLARE _hora_fin TIME;
	DECLARE _hora_actual TIME;
    
    DECLARE id_jornada INT;
         
    SET dia_semana = WEEKDAY(prm_fecha);
    SET duracion_cita = 30;
    
	SELECT JL.hora_inicio, JL.hora_fin, JL.hora_inicio INTO _hora_inicio, _hora_fin, _hora_actual 
	FROM jornada_laboral JL
	WHERE JL.dia_semana = dia_semana;      
    
    CREATE TEMPORARY TABLE IF NOT EXISTS intervalos_tiempo (intervalo VARCHAR(20), hora_inicio TIME, hora_fin TIME);
    
    -- bucle WHILE y tabla temporal
	WHILE _hora_actual < _hora_fin DO
        -- Calcular la hora fin del intervalo actual sumando la duración de la cita
        SET @hora_fin_intervalo = ADDTIME(_hora_actual, SEC_TO_TIME(duracion_cita * 60));

        -- Formatear el intervalo de tiempo como una cadena
        SET @intervalo = CONCAT(TIME_FORMAT(_hora_actual, '%H:%i'), ' - ', TIME_FORMAT(@hora_fin_intervalo, '%H:%i'));

        -- Insertar el intervalo en la tabla temporal
        INSERT INTO intervalos_tiempo (intervalo, hora_inicio, hora_fin) VALUES (@intervalo, _hora_actual, @hora_fin_intervalo);

        -- Actualizar la hora actual para el siguiente intervalo
        SET _hora_actual = @hora_fin_intervalo;
	END WHILE;    
    
	-- Mostrar los registros de la tabla temporal
	SELECT 	I.*, CONCAT( IFNULL(U.nombre, ''), ' ', IFNULL(U.apellidos, '') ) AS Nombre, IFNULL(U.celular, '') AS Celular, IFNULL(AE.descripcion, '') AS Estatus,
			IFNULL(A.id_agenda, 0) AS id_agenda, A.clave_confirmacion, IFNULL(U.id_usuario, 0) AS id_usuario
	FROM intervalos_tiempo I
	LEFT JOIN agenda A ON A.id_empresa = prm_id_empresa AND A.fecha = prm_fecha AND A.hora_inicio = I.hora_inicio AND A.hora_fin = I.hora_fin
    LEFT JOIN agenda_estatus AE ON AE.id_agenda_estatus = IFNULL(A.id_agenda_estatus, 1)
    LEFT JOIN usuarios U ON U.id_empresa = prm_id_empresa AND U.id_usuario = A.id_usuario;
	-- WHERE A.id_agenda IS NULL;
    
	-- Eliminar la tabla temporal (opcional)
	DROP TEMPORARY TABLE intervalos_tiempo;  
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `putAgenda`(
	IN prm_id_empresa INT,
    IN prm_id_agenda INT,
    IN prm_intervalo VARCHAR(13),
    IN prm_id_usuario INT,
    IN prm_nombre VARCHAR(90)
)
BEGIN
	-- ACTUALIZO EL NOMBRE DEL USUARIO SI ESTE CAMBIO
	IF	(
			SELECT COUNT(*)
			FROM usuarios U
			WHERE U.id_empresa = prm_id_empresa AND U.id_usuario = prm_id_usuario AND U.nombre <> prm_nombre
		) = 0
	THEN 
		UPDATE usuarios U SET U.nombre = prm_nombre
        WHERE U.id_empresa = prm_id_empresa AND U.id_usuario = prm_id_usuario;
    END IF;
    
    -- TODO: CAMBIAR EL HORARIO DE LA CITA EN AGENDA
END

AGREGUE PAQUETE EN frontend
    npm install react-datepicker date-fns
    npm install date-fns

ALTER TABLE `crm`.`agenda` 
ADD COLUMN `clave_confirmacion` VARCHAR(6) NULL AFTER `id_jornada`;    

