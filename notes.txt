1. Configura la Estructura del Proyecto: Primero, necesitas crear una estructura básica del proyecto que separe el frontend y el backend. Aquí hay un ejemplo de cómo puede lucir la estructura de tu proyecto:

mi-proyecto/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── index.js
│   │   ├── ... (otros archivos del backend)
│   ├── package.json
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   ├── ... (otros archivos del frontend)
│   ├── package.json
├── package.json

2. Configura el Backend (Node.js)

1. Navega al directorio backend:

cd mi-proyecto/backend

2. Inicializa el proyecto de Node.js:

npm init -y

3. Instala las dependencias necesarias (por ejemplo, Express):

 -- npm install express
 -- Instalar nodemon: npm i -D nodemon
 -- Instalar dotenv: npm i dotenv

4. Crea el archivo principal (index.js):

// backend/src/index.js
const express = require('express');
const app = express();
const PORT = process.env.PORT || 5000;

app.get('/api', (req, res) => {
  res.send('Hello from the backend!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

3. . Configura el Frontend (React)

1. Navega al directorio frontend: cd ../frontend
1.1 Elimnar la carpeta src
2. Crea una nueva aplicación de React: npx create-react-app .
3. Instala axios para hacer solicitudes HTTP al backend (opcional, pero común): npm install axios
4. Instalar react-bootstrap: npm install react-bootstrap bootstrap
5. Agregar Bootstrap en el proyecto: En el archivo src/index.js, importa el CSS de Bootstrap: 
    import 'bootstrap/dist/css/bootstrap.min.css';
6. Instalar react-router-dom para el manejo de rutas: npm install react-router-dom
7. Instalar Immer:  npm install immer use-immer
8. Instalar react-router-dom: npm install react-router-dom



4. Configura los Scripts de NPM
    1. Navega al directorio raíz del proyecto: cd ..
    2. Inicializa un nuevo package.json en el directorio raíz si aún no existe: npm init -y
    3. Instala concurrently: npm install concurrently --save-dev
    4. Configura los scripts en package.json del directorio raíz:

        {
            "name": "mi-proyecto",
            "version": "1.0.0",
            "main": "index.js",
            "license": "MIT",
            "scripts": {
                "start": "concurrently \"npm run server\" \"npm run client\"",
                "server": "cd backend && npm start",
                "client": "cd frontend && npm start"
            }
        }

    5.  Proxy en React
        Para evitar problemas de CORS, puedes configurar un proxy en el archivo package.json del frontend:
        {
        "name": "frontend",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
            // tus dependencias
        },
        "scripts": {
            "start": "react-scripts start",
            // otros scripts
        },
        "proxy": "http://localhost:5000"
        }


npm install jodit-react html-react-parser --save

en backend:
    npm install mysql2
    npm install bcrypt
    npm install jsonwebtoken

en frontend:
    npm install dotenv
    agregar archivo .env
    agregar las variables:
        REACT_APP_API_URL=http://localhost:8080/api
        REACT_APP_APP_EMPRESA_ID=1


npm install cropperjs
npm install cloudinary
npm i express-fileupload (no instaar)
npm i multer
npm i sharp (no es necesario instalarlo)
https://www.npmjs.com/package/express-fileupload
ejmplo de express-fileupload: hacer una prueba.
https://github.com/richardgirges/express-fileupload/tree/master/example#basic-file-upload




--- npm config
Al reiniciar el equipo tengo que actualizar los sets de npm 
npm config set registry http://registry.npmjs.org/ 
npm config set registry https://registry.npmjs.org/
npm config set proxy http://10.100.0.100:8080  
npm config set https-proxy http://10.100.0.100:8080 

-- para eliminar el proxy actual:
npm config rm proxy
npm config rm https-proxy

agregar en getProductosListing el campo: P.existencia
cambiar el tipo de dato de activo del catalago de productos a TINYINT(4)
en el procedimiento postProducto cambiar el tipo de dato del parámetro activo a TINYINT


CREATE DEFINER=`root`@`localhost` PROCEDURE `getPuntosDeEntrega`(
	IN limite INT,
    IN pagina INT   
)
BEGIN

	SELECT COUNT(*) AS totalRegistros
    FROM puntosdeentrega;

    IF (limite > 0) THEN
		SELECT 	id_puntoDeEntrega, nombre, horario, 
				DATE_FORMAT(fecha_actualizacion, '%m/%d/%Y %H:%i') AS fecha_actualizacion,
                CASE WHEN activo = 1 THEN 'Si' ELSE 'NO' END AS activo		
		FROM puntosdeentrega
        ORDER BY id_empresa, id_puntoDeEntrega
		LIMIT limite OFFSET pagina;
	ELSE 
		SELECT 	id_puntoDeEntrega, nombre, horario, 
				DATE_FORMAT(fecha_actualizacion, '%m/%d/%Y %H:%i') AS fecha_actualizacion, 
				CASE WHEN activo = 1 THEN 'Si' ELSE 'NO' END AS activo
		FROM puntosdeentrega
        ORDER BY id_empresa, id_puntoDeEntrega;
	END IF;
         
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `postPuntoDeEntrega`(
	IN prm_id_empresa INT,
    IN prm_id_puntoDeEntrega INT,
    IN prm_nombre VARCHAR(200),
    IN prm_horario VARCHAR(600),
    IN prm_activo TINYINT
)
BEGIN

	IF prm_id_puntoDeEntrega = 0 THEN
    
		INSERT INTO puntosdeentrega (id_empresa, nombre, horario, fecha_creacion, fecha_actualizacion, activo)
		VALUES (prm_id_empresa, prm_nombre, prm_horario, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP, prm_activo);    
    
    ELSE
		
        UPDATE puntosdeentrega SET 	nombre = prm_nombre, 
									horario = prm_horario,                                  
									activo = prm_activo,
									fecha_actualizacion = CURRENT_TIMESTAMP()
		WHERE id_empresa = prm_id_empresa AND id_puntoDeEntrega = prm_id_puntoDeEntrega;
    	
	END IF;


END

-- agregar el campo fecha_nacimiento DATE a la tabla Usuarios

CREATE DEFINER=`root`@`localhost` PROCEDURE `getUsuario`(
	prm_id_empresa INT,
    prm_id_usuario INT    
)
BEGIN
	SELECT nombre, apellidos, celular, DATE_FORMAT(fecha_nacimiento,'%Y-%m-%d') AS fecha_nacimiento
    FROM usuarios
    WHERE id_empresa = prm_id_empresa AND id_usuario = prm_id_usuario;
END

CREATE TABLE direccion_tipo_identidad (
    id_empresa BIGINT NOT NULL,
    id_direccion_tipo_identidad SMALLINT AUTO_INCREMENT,    
    descripcion VARCHAR(200) NOT NULL,
    PRIMARY KEY(id_empresa, id_direccion_tipo_identidad),
    FOREIGN KEY(id_empresa) REFERENCES empresas(id_empresa) ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE='MyISAM';

AGREGAR:
id_direccion_tipo_identidad en la tabla de direcciones

CREATE DEFINER=`root`@`localhost` PROCEDURE `postDireccion`(
	prm_id_empresa INT,
    prm_id_direccion INT,
    prm_identidad INT,
    prm_id_direccion_tipo_identidad INT,
    prm_direccion_por_defecto BIT,
    prm_calle VARCHAR(200),
    prm_numero VARCHAR(20),
    prm_colonia VARCHAR(200),
    prm_ciudad VARCHAR(200),
    prm_estado VARCHAR(200),
    prm_pais VARCHAR(200),
    prm_codigo_postal VARCHAR(10)    
)
BEGIN

    DECLARE _direccion VARCHAR(800);

    SET _direccion = CONCAT(prm_calle, ' ', prm_numero, ', ', prm_colonia, ', ', prm_ciudad, ', ', prm_estado, ', ', prm_pais, ', ', prm_codigo_postal);
	
    IF prm_id_direccion = 0 THEN
    
		INSERT INTO direcciones 
			(id_empresa, identidad, id_direccion_tipo_identidad, direccion, calle, numero, colonia, ciudad, estado, pais, codigo_postal,
            fecha_creacion, fecha_actualizacion, direccion_por_defecto)
            VALUES
            (prm_id_empresa, prm_identidad, prm_id_direccion_tipo_identidad, _direccion, prm_calle, prm_numero, prm_colonia, prm_ciudad, 
            prm_estado, prm_pais, prm_codigo_postal, CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP, prm_direccion_por_defecto);
            
        SET prm_id_direccion = LAST_INSERT_ID();
	
    ELSE
    
		UPDATE direcciones
			SET identidad = prm_identidad, id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad, 
				direccion = _direccion, calle = prm_calle, numero = prm_numero, colonia = prm_colonia, ciudad = prm_ciudad, 
                estado = prm_estado, pais = prm_pais, codigo_postal = prm_codigo_postal,
                fecha_actualizacion = CURRENT_TIMESTAMP(),
                direccion_por_defecto = prm_direccion_por_defecto
        WHERE 	id_empresa = prm_id_empresa AND 
				id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad  AND 
                identidad = prm_identidad AND
                id_direccion = prm_id_direccion;
                		
    END IF;
    
    CALL putRevisaDireccionPorDefecto(prm_id_empresa, prm_id_direccion_tipo_identidad, prm_identidad, prm_id_direccion, prm_direccion_por_defecto);

END

TRUNCATE TABLE direcciones;
ALTER TABLE direcciones DROP COLUMN tipo_identidad;
AGREGAR EL CAMPO: id_direccion_tipo_identidad COMO PRIMARY KEY EN direcciones

CREATE DEFINER=`root`@`localhost` PROCEDURE `getDirecciones`(
	IN limite INT,
    IN pagina INT,
    IN prm_id_empresa INT,
    IN prm_id_direccion_tipo_identidad INT,
    IN prm_identidad INT
)
BEGIN

    SELECT COUNT(*) AS totalRegistros
    FROM direcciones;

	IF (limite > 0) THEN
		SELECT 	id_direccion, calle, numero, colonia, ciudad, estado, pais, codigo_postal,
				DATE_FORMAT(fecha_actualizacion, '%m/%d/%Y %H:%i') AS fecha_actualizacion,
                CASE WHEN direccion_por_defecto = 1 THEN 'Si' ELSE 'NO' END AS direccion_por_defecto		
		FROM direcciones
        WHERE id_empresa = prm_id_empresa AND id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad AND identidad = prm_identidad
        ORDER BY id_empresa, id_direccion
		LIMIT limite OFFSET pagina;
	ELSE 
		SELECT 	id_direccion, calle, numero, colonia, ciudad, estado, pais, codigo_postal,
				DATE_FORMAT(fecha_actualizacion, '%m/%d/%Y %H:%i') AS fecha_actualizacion, 
				CASE WHEN direccion_por_defecto = 1 THEN 'Si' ELSE 'NO' END AS direccion_por_defecto
		FROM direcciones
         WHERE id_empresa = prm_id_empresa AND id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad AND identidad = prm_identidad
        ORDER BY id_empresa, id_direccion;
	END IF;

END

CREATE DEFINER=`root`@`localhost` PROCEDURE `putRevisaDireccionPorDefecto`(
	prm_id_empresa INT,
    prm_id_direccion_tipo_identidad INT,
    prm_identidad INT,
    prm_id_direccion INT,
    prm_direccion_por_defecto BIT
)
BEGIN
	DECLARE cantidadPorDefecto SMALLINT;
    
	/*Si es verdadera entonces pongo las demás en false*/
	IF prm_direccion_por_defecto = true THEN
		UPDATE direcciones SET direccion_por_defecto = FALSE
        WHERE 	id_empresa = prm_id_empresa AND 
				id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad  AND 
                identidad = prm_identidad AND
                id_direccion <> prm_id_direccion;
    END IF;
    
    /*Si no hay verdaderas entonces la que se esta modificando la pongo en true*/
	IF prm_direccion_por_defecto = false THEN
    
		IF EXISTS(
			SELECT IFNULL(COUNT(*), 0) > 0
			FROM direcciones
			WHERE 	id_empresa = prm_id_empresa AND 
					id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad  AND 
					identidad = prm_identidad AND
					direccion_por_defecto = TRUE
        ) THEN         

			UPDATE direcciones SET direccion_por_defecto = TRUE
			WHERE 	id_empresa = prm_id_empresa AND 
					id_direccion_tipo_identidad = prm_id_direccion_tipo_identidad  AND 
					identidad = prm_identidad AND
					id_direccion = prm_id_direccion;
		END IF;

                        
    END IF;
END
