1. Configura la Estructura del Proyecto: Primero, necesitas crear una estructura básica del proyecto que separe el frontend y el backend. Aquí hay un ejemplo de cómo puede lucir la estructura de tu proyecto:

mi-proyecto/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── index.js
│   │   ├── ... (otros archivos del backend)
│   ├── package.json
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   ├── ... (otros archivos del frontend)
│   ├── package.json
├── package.json

2. Configura el Backend (Node.js)

1. Navega al directorio backend:

cd mi-proyecto/backend

2. Inicializa el proyecto de Node.js:

npm init -y

3. Instala las dependencias necesarias (por ejemplo, Express):

 -- npm install express
 -- Instalar nodemon: npm i -D nodemon
 -- Instalar dotenv: npm i dotenv

4. Crea el archivo principal (index.js):

// backend/src/index.js
const express = require('express');
const app = express();
const PORT = process.env.PORT || 5000;

app.get('/api', (req, res) => {
  res.send('Hello from the backend!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

3. . Configura el Frontend (React)

1. Navega al directorio frontend: cd ../frontend
1.1 Elimnar la carpeta src
2. Crea una nueva aplicación de React: npx create-react-app .
3. Instala axios para hacer solicitudes HTTP al backend (opcional, pero común): npm install axios
4. Instalar react-bootstrap: npm install react-bootstrap bootstrap
5. Agregar Bootstrap en el proyecto: En el archivo src/index.js, importa el CSS de Bootstrap: 
    import 'bootstrap/dist/css/bootstrap.min.css';
6. Instalar react-router-dom para el manejo de rutas: npm install react-router-dom
7. Instalar Immer:  npm install immer use-immer
8. Instalar react-router-dom: npm install react-router-dom



4. Configura los Scripts de NPM
    1. Navega al directorio raíz del proyecto: cd ..
    2. Inicializa un nuevo package.json en el directorio raíz si aún no existe: npm init -y
    3. Instala concurrently: npm install concurrently --save-dev
    4. Configura los scripts en package.json del directorio raíz:

        {
            "name": "mi-proyecto",
            "version": "1.0.0",
            "main": "index.js",
            "license": "MIT",
            "scripts": {
                "start": "concurrently \"npm run server\" \"npm run client\"",
                "server": "cd backend && npm start",
                "client": "cd frontend && npm start"
            }
        }

    5.  Proxy en React
        Para evitar problemas de CORS, puedes configurar un proxy en el archivo package.json del frontend:
        {
        "name": "frontend",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
            // tus dependencias
        },
        "scripts": {
            "start": "react-scripts start",
            // otros scripts
        },
        "proxy": "http://localhost:5000"
        }


npm install jodit-react html-react-parser --save

en backend:
    npm install mysql2
    npm install bcrypt
    npm install jsonwebtoken

en frontend:
    npm install dotenv
    agregar archivo .env
    agregar las variables:
        REACT_APP_API_URL=http://localhost:8080/api
        REACT_APP_APP_EMPRESA_ID=1


npm install cropperjs
npm install cloudinary
npm i express-fileupload (no instaar)
npm i multer
npm i sharp (no es necesario instalarlo)
https://www.npmjs.com/package/express-fileupload
ejmplo de express-fileupload: hacer una prueba.
https://github.com/richardgirges/express-fileupload/tree/master/example#basic-file-upload




--- npm config
Al reiniciar el equipo tengo que actualizar los sets de npm 
npm config set registry http://registry.npmjs.org/ 
npm config set registry https://registry.npmjs.org/
npm config set proxy http://10.100.0.100:8080  
npm config set https-proxy http://10.100.0.100:8080 

-- para eliminar el proxy actual:
npm config rm proxy
npm config rm https-proxy

agregar en getProductosListing el campo: P.existencia
cambiar el tipo de dato de activo del catalago de productos a TINYINT(4)
en el procedimiento postProducto cambiar el tipo de dato del parámetro activo a TINYINT

CREATE TABLE `visitas` (
  `id_empresa` bigint(20) NOT NULL,
  `id_visita` bigint(20) NOT NULL AUTO_INCREMENT,
  `id_cliente` bigint(20) NOT NULL,
  `nombre` varchar(90) COLLATE latin1_spanish_ci NOT NULL,
  `comentarios` varchar(800) COLLATE latin1_spanish_ci NOT NULL,
  PRIMARY KEY (`id_empresa`,`id_visita`),
  KEY `id_empresa_cliente` (`id_empresa`,`id_cliente`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_spanish_ci;

CREATE TABLE `clientes` (
  `id_empresa` bigint(20) NOT NULL,
  `id_cliente` bigint(20) NOT NULL AUTO_INCREMENT,
  `empresa` varchar(200) COLLATE latin1_spanish_ci NOT NULL,
  `nombre` varchar(200) COLLATE latin1_spanish_ci NOT NULL,
  `telefonos` varchar(90) COLLATE latin1_spanish_ci NOT NULL,
  `celulares` varchar(90) COLLATE latin1_spanish_ci NOT NULL,
  `fecha_ultima_visita` datetime NULL,
  `fecha_ultima_compra` datetime NULL,
  PRIMARY KEY (`id_empresa`,`id_cliente`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_spanish_ci;

INSERT INTO clientes (id_empresa, empresa, nombre, telefonos, celulares) VALUES (1, 'HostRegio', 'Roberto Vázquez Hastings', '818.252.2653', '818.252.2653');
INSERT INTO clientes (id_empresa, empresa, nombre, telefonos, celulares) VALUES (1, 'Ferreteria La Moderna', 'Roberto Vázquez Hastings', '818.252.2653', '818.252.2653');

update crm.direcciones set id_direccion_tipo_identidad = 1

ALTER TABLE `crm`.`direcciones` 
ADD COLUMN `id_direccion_tipo_identidad`int(11) NULL AFTER `id_empresa`;


ALTER TABLE `crm`.`visitas` 
ADD COLUMN `fecha_inicio` DATETIME NULL AFTER `comentarios`,
ADD COLUMN `fecha_final` DATETIME NULL AFTER `fecha_inicio`,
ADD COLUMN `latitud` DOUBLE NULL AFTER `fecha_final`,
ADD COLUMN `longitud` DOUBLE NULL AFTER `latitud`;
ADD COLUMN `id_usuario` BIGINT NULL AFTER `id_cliente`;

CREATE DEFINER=`appusercrmadmin`@`%` PROCEDURE `postVisita`(
	p_id_empresa BIGINT,
    p_id_visita BIGINT,
    p_id_cliente BIGINT,
    p_id_usuario BIGINT,
    p_nombre VARCHAR(0),
    p_comentarios VARCHAR(800),
    p_fecha_inicio DATETIME,
    p_fecha_final DATETIME,
    p_latitud DOUBLE,
    p_longitud DOUBLE    
)
BEGIN

	IF p_id_visita = 0 THEN
		
        INSERT INTO visitas (id_empresa, id_cliente, id_usuario, nombre, comentarios, fecha_inicio, latidud, longitud)
			VALUES (p_id_empresa, p_id_cliente, p_id_usuario, p_nombre, p_comentarios, p_fecha_inicio, p_latitud, p_longitud);
            
		SET p_id_visita = LAST_INSERT_ID();
        
	ELSE
    
		UPDATE visitas SET id_cliente = p_id_cliente, nombre = p_nombre, comentarios = p_comentarios, fecha_final = p_fecha_final
        WHERE id_empresa = p_id_empresa AND id_visita = p_id_visita;
							
	END IF;

END