1. Configura la Estructura del Proyecto: Primero, necesitas crear una estructura básica del proyecto que separe el frontend y el backend. Aquí hay un ejemplo de cómo puede lucir la estructura de tu proyecto:

mi-proyecto/
├── backend/
│   ├── node_modules/
│   ├── src/
│   │   ├── index.js
│   │   ├── ... (otros archivos del backend)
│   ├── package.json
├── frontend/
│   ├── node_modules/
│   ├── public/
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   ├── ... (otros archivos del frontend)
│   ├── package.json
├── package.json

2. Configura el Backend (Node.js)

1. Navega al directorio backend:

cd mi-proyecto/backend

2. Inicializa el proyecto de Node.js:

npm init -y

3. Instala las dependencias necesarias (por ejemplo, Express):

 -- npm install express
 -- Instalar nodemon: npm i -D nodemon
 -- Instalar dotenv: npm i dotenv

4. Crea el archivo principal (index.js):

// backend/src/index.js
const express = require('express');
const app = express();
const PORT = process.env.PORT || 5000;

app.get('/api', (req, res) => {
  res.send('Hello from the backend!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

3. . Configura el Frontend (React)

1. Navega al directorio frontend: cd ../frontend
1.1 Elimnar la carpeta src
2. Crea una nueva aplicación de React: npx create-react-app .
3. Instala axios para hacer solicitudes HTTP al backend (opcional, pero común): npm install axios
4. Instalar react-bootstrap: npm install react-bootstrap bootstrap
5. Agregar Bootstrap en el proyecto: En el archivo src/index.js, importa el CSS de Bootstrap: 
    import 'bootstrap/dist/css/bootstrap.min.css';
6. Instalar react-router-dom para el manejo de rutas: npm install react-router-dom
7. Instalar Immer:  npm install immer use-immer
8. Instalar react-router-dom: npm install react-router-dom



4. Configura los Scripts de NPM
    1. Navega al directorio raíz del proyecto: cd ..
    2. Inicializa un nuevo package.json en el directorio raíz si aún no existe: npm init -y
    3. Instala concurrently: npm install concurrently --save-dev
    4. Configura los scripts en package.json del directorio raíz:

        {
            "name": "mi-proyecto",
            "version": "1.0.0",
            "main": "index.js",
            "license": "MIT",
            "scripts": {
                "start": "concurrently \"npm run server\" \"npm run client\"",
                "server": "cd backend && npm start",
                "client": "cd frontend && npm start"
            }
        }

    5.  Proxy en React
        Para evitar problemas de CORS, puedes configurar un proxy en el archivo package.json del frontend:
        {
        "name": "frontend",
        "version": "0.1.0",
        "private": true,
        "dependencies": {
            // tus dependencias
        },
        "scripts": {
            "start": "react-scripts start",
            // otros scripts
        },
        "proxy": "http://localhost:5000"
        }


npm install jodit-react html-react-parser --save

en backend:
    npm install mysql2
    npm install bcrypt
    npm install jsonwebtoken

en frontend:
    npm install dotenv
    agregar archivo .env
    agregar las variables:
        REACT_APP_API_URL=http://localhost:8080/api
        REACT_APP_APP_EMPRESA_ID=1


npm install cropperjs
npm install cloudinary
npm i express-fileupload (no instaar)
npm i multer
npm i sharp (no es necesario instalarlo)
https://www.npmjs.com/package/express-fileupload
ejmplo de express-fileupload: hacer una prueba.
https://github.com/richardgirges/express-fileupload/tree/master/example#basic-file-upload




--- npm config
Al reiniciar el equipo tengo que actualizar los sets de npm 
npm config set registry http://registry.npmjs.org/ 
npm config set registry https://registry.npmjs.org/
npm config set proxy http://10.100.0.100:8080  
npm config set https-proxy http://10.100.0.100:8080 

-- para eliminar el proxy actual:
npm config rm proxy
npm config rm https-proxy

agregar en getProductosListing el campo: P.existencia
cambiar el tipo de dato de activo del catalago de productos a TINYINT(4)
en el procedimiento postProducto cambiar el tipo de dato del parámetro activo a TINYINT


USE CRM;
INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo) VALUES (1, 'Efectivo - contra entrega', '', 1);
INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo) VALUES (1, 'Tarjeta Débito/Crédito - contra entrega', '', 1);
INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo) VALUES (1, 'Depósito', '', 1);
INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo) VALUES (1, 'Transferencia', '', 1);
INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo) VALUES (1, 'Pago en línea', '', 1);
INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo) VALUES (1, 'Línea de crédito', '', 1);


CREATE DEFINER=`appusercrmadmin`@`%` PROCEDURE `postVisita`(
	p_id_empresa BIGINT,
    p_id_visita BIGINT,
    p_id_cliente BIGINT,
    p_id_usuario BIGINT,
    p_nombre VARCHAR(0),
    p_comentarios VARCHAR(800),
    p_fecha_inicio DATETIME,
    p_fecha_final DATETIME,
    p_latitud DOUBLE,
    p_longitud DOUBLE    
)
BEGIN

	IF p_id_visita = 0 THEN
		
        INSERT INTO visitas (id_empresa, id_cliente, id_usuario, nombre, comentarios, fecha_inicio, latidud, longitud)
			VALUES (p_id_empresa, p_id_cliente, p_id_usuario, p_nombre, p_comentarios, p_fecha_inicio, p_latitud, p_longitud);
            
		SET p_id_visita = LAST_INSERT_ID();
        
	ELSE
    
		UPDATE visitas SET id_cliente = p_id_cliente, nombre = p_nombre, comentarios = p_comentarios, fecha_final = p_fecha_final
        WHERE id_empresa = p_id_empresa AND id_visita = p_id_visita;
							
	END IF;

END

CREATE TABLE pedido_estatus (
    id_empresa BIGINT NOT NULL,
    id_pedido_estatus SMALLINT AUTO_INCREMENT,
    descripcion VARCHAR(100) NOT NULL,
    orden SMALLINT NOT NULL,
    PRIMARY KEY(id_empresa, id_pedido_estatus),
    FOREIGN KEY (id_empresa) REFERENCES empresas(id_empresa) ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE='MyISAM';

INSERT INTO pedido_estatus (id_empresa, descripcion, orden) VALUES
	(1, 'Recibido', 0),
    (1, 'En proceso', 1),
    (1, 'Terminado', 2),
    (1, 'En camino', 3),
    (1, 'Entregado', 4);

CREATE TABLE pedidos(
    id_empresa BIGINT NOT NULL,
	id_pedido BIGINT AUTO_INCREMENT,    
    id_usuario BIGINT NOT NULL,
    id_cliente BIGINT NOT NULL,
    id_direccion BIGINT NOT NULL,
    id_pedido_estatus SMALLINT NOT NULL,
    id_forma_de_pago SMALLINT NOT NULL,
    total DOUBLE PRECISION NOT NULL,
    importe_pagado DOUBLE PRECISION NULL,
    saldo DOUBLE PRECISION NOT NULL,    
    fecha_creacion DATETIME NOT NULL,
    fecha_actualizacion DATETIME NOT NULL,
    PRIMARY KEY (id_empresa, id_pedido),
    FOREIGN KEY(id_empresa) REFERENCES empresas(id_empresa) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_empresa, id_usuario) REFERENCES usuarios(id_empresa, id_usuario) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_empresa, id_direccion) REFERENCES direcciones(id_empresa, id_direccion) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (id_empresa, id_pedido_estatus) REFERENCES pedido_estatus(id_empresa, id_pedido) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_empresa, id_forma_de_pago) REFERENCES formas_de_pago(id_empresa, id_forma_de_pago) ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE='MyISAM';

CREATE TABLE pedidos_detalle(
    id_empresa BIGINT NOT NULL,
    id_pedido_detalle BIGINT AUTO_INCREMENT,
	id_pedido BIGINT NOT NULL,
    id_producto BIGINT NOT NULL,
    cantidad INT NOT NULL,
    subtotal DOUBLE PRECISION NOT NULL,
    fecha_creacion DATETIME NOT NULL,
    fecha_actualizacion DATETIME NOT NULL,
    PRIMARY KEY(id_empresa, id_pedido, id_pedido_detalle),
    FOREIGN KEY(id_empresa) REFERENCES empresas(id_empresa) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_empresa, id_pedido) REFERENCES pedidos(id_empresa, id_pedido) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(id_empresa, id_producto) REFERENCES productos(id_empresa, id_producto) ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE='MyISAM';


CREATE DEFINER=`appusercrmadmin`@`%` PROCEDURE `postHost`(
	IN prm_nombre VARCHAR(300),
    IN prm_logo VARCHAR(255),
	IN prm_host VARCHAR(100)
)
BEGIN
    DECLARE idEmpresa BIGINT;
    DECLARE idUsuario INT;
    DECLARE lorem VARCHAR(800);
	-- DECLARE EXIT HANDLER FOR SQLEXCEPTION
    -- BEGIN
        -- ROLLBACK;
        -- Opcional: Puedes agregar aquí un mensaje de error personalizado
        -- SELECT 'OCURRIÓ UN ERROR', ERROR_MESSAGE();
        
    -- END;        
	
	/*ALTA EN EMPRESAS*/

    SET lorem = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';
        
    START TRANSACTION;
    
    INSERT INTO empresas (nombre, logo, host) VALUES (prm_nombre, prm_logo, prm_host);
    SET idEmpresa = last_insert_id();

	/*ALTA DE HOST*/
	IF NOT EXISTS(
		SELECT 1 
        FROM hosts H
        WHERE H.host = prm_host
    ) 
    THEN 
		INSERT INTO hosts (host, id_empresa) VALUES (prm_host, idEmpresa);
	ELSE 
		UPDATE hosts SET id_empresa = idEmpresa WHERE host = prm_host;
	END IF;
    -- SELECT 'EMPRESA';
    
    /*ALTA DE LANDING PAGE*/    
    INSERT INTO landingPage (id_empresa, quienes_somos, servicios, productos, mostrar_quienes_somos, mostrar_productos, mostrar_servicios, mostrar_contactanos, mostrar_sitioEnMantenimiento)
		VALUES (idEmpresa, lorem, lorem, lorem, 1, 1, 1, 1, 1);
	-- SELECT 'LANDING PAGE';
    
    /*ALTA DE USUARIO MASTER*/
    INSERT INTO usuarios (id_empresa, email, nombre, apellidos, celular, imagen, password, fecha_nacimiento, fecha_creacion, fecha_actualizacion)
    SELECT idEmpresa, U.email, U.nombre, U.apellidos, U.celular, U.imagen, U.password, U.fecha_nacimiento, current_timestamp(), current_timestamp()
    FROM usuarios U
    WHERE U.id_usuario = 1 AND U.id_empresa = 1;
    
    SET idUsuario = last_insert_id();
    -- SELECT 'USUARIO';
    
    /*ALTA DE DIRECCION*/
    INSERT INTO direcciones (id_empresa, id_direccion_tipo_identidad, identidad, direccion_por_defecto, direccion, calle, numero, colonia, ciudad, estado, pais, codigo_postal, fecha_creacion, fecha_actualizacion)
		VALUES (idEmpresa, 1, 1, 1, 'Lorem ipsum dolor sit amet', 'Lorem ipsum dolor sit amet', 'Lorem ipsum', 'Lorem ipsum dolor sit amet', 'Lorem ipsum dolor sit amet', 
			'Lorem ipsum dolor sit amet', 'Lorem ipsum dolor sit amet', 'Lorem', current_timestamp(), current_timestamp());
	-- SELECT 'DIRECCION';
        
    /*ALTA DE FORMAS DE PAGO*/
    /*/Efectivo*/
    INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo)
    SELECT idEmpresa, F.descripcion, '', 1 FROM formas_de_pago F WHERE F.id_empresa = 1 AND F.id_forma_de_pago = 1; 
    /*/Tarjeta contra entrega*/
    INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo)
    SELECT idEmpresa, F.descripcion, '', 0 FROM formas_de_pago F WHERE F.id_empresa = 1 AND F.id_forma_de_pago = 2;     
    /*/Deposito*/
    INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo)
    SELECT idEmpresa, F.descripcion, '', 1 FROM formas_de_pago F WHERE F.id_empresa = 1 AND F.id_forma_de_pago = 3;   
    /*/Transferencia*/
    INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo)
    SELECT idEmpresa, F.descripcion, '', 1 FROM formas_de_pago F WHERE F.id_empresa = 1 AND F.id_forma_de_pago = 4; 
    /*/Pago en Linea*/
    INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo)
    SELECT idEmpresa, F.descripcion, '', 0 FROM formas_de_pago F WHERE F.id_empresa = 1 AND F.id_forma_de_pago = 5;         
    /*/Linea de Crédito*/
    INSERT INTO formas_de_pago (id_empresa, descripcion, informacion_adicional, activo)
    SELECT idEmpresa, F.descripcion, '', 0 FROM formas_de_pago F WHERE F.id_empresa = 1 AND F.id_forma_de_pago = 6;  
    -- SELECT 'FORMAS DE PAGO';
    
    /*AGREGAR DATOS EN TABLA: pedido_estatus*/
    INSERT INTO pedido_estatus (id_empresa, descripcion, orden)
    SELECT idEmpresa, descripcion, orden FROM pedido_estatus WHERE id_empresa = 1;
    
    -- AGREGAR EL ROL AL USUARIO 
    INSERT INTO usuarios_roles (id_empresa, id_usuario, id_rol, fecha_creacion, fecha_actualizacion)
		VALUES (idEmpresa, idUsuario, 2, current_timestamp, current_timestamp);
    
    -- COMMIT;
END


en la tabla de usuarios:
    agregar el email como parte de la llave y quitar que sea único.
    quiatar celular que sea único.

de la tabla direccion_tipo_identidad eliminar la columna id_empresa    

-- eliminar id_empresa de roles
-- agregar el usuario_rol

Este es el proxy que tenía en package.json 
    "proxy": "http://localhost:3000",


